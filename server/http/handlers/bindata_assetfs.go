// Code generated by go-bindata.
// sources:
// ../openapi.yaml
// DO NOT EDIT!

package handlers

import (
	"github.com/elazarl/go-bindata-assetfs"
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _openapiYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5f\x6f\xdc\xb8\x11\x7f\xd7\xa7\x18\x5c\x0b\xf8\xe5\xd6\xeb\xc4\x49\x7b\xd0\x9b\xe3\xf4\xae\x06\xce\x8d\x51\x1b\xe8\x43\x51\xf4\xb8\xd2\xec\x2e\x2f\x14\xa9\x23\x29\xaf\x8d\xa2\xdf\xfd\x40\x52\x7f\x48\x89\x2b\xad\x1c\x67\x7d\x09\xb2\x4f\x36\x35\x33\x1c\xfe\x38\xff\x38\xa4\x28\x91\x93\x92\xa6\x70\x7e\x7a\x76\x7a\x96\x24\x94\xaf\x45\x9a\x00\x68\xaa\x19\xa6\x70\xb7\x45\xb8\xe5\xe4\x23\x2e\x6e\x51\xde\xa3\x84\x8b\x9b\xab\x04\x20\x47\x95\x49\x5a\x6a\x2a\x78\x84\x86\x2a\x20\xa0\xdc\xdf\x6b\x21\x41\x70\x46\x39\x02\x91\x19\xc9\x11\x36\xa4\x40\x58\x80\x32\x1c\xa7\x09\xc0\x3d\x4a\x65\xe5\xbc\x39\x3d\x3f\x7d\x95\x00\x30\x9a\x21\x57\x68\xb4\x00\xe0\xa4\xc0\x14\xae\xaf\xee\x12\x80\x4c\x70\x4d\x32\xed\x7f\xb8\xba\x27\x1c\x6e\x2a\xb5\xfd\x48\xb9\x1d\xae\x24\x4b\x61\xab\x75\xa9\xd2\xe5\x52\xef\xa8\xd6\x28\x4f\x33\x51\x2c\x0d\xe5\x7b\xbc\x47\x26\x4a\x94\x49\xe2\xd4\x53\x46\xd6\xc2\x31\x2d\x49\x49\xad\x88\x60\x71\x97\x95\x94\xc8\x35\x50\xae\x34\xe1\x19\x76\xf4\x66\x92\x74\xb9\x64\x22\x23\x6c\x2b\x94\x4e\x7f\x38\xfb\xe1\x2c\x2e\xe4\xef\x77\x77\x37\x7b\x24\xa8\x19\x22\x6e\x3b\x19\x49\x49\xf4\xd6\x6a\xbf\x34\x78\x2a\x87\xc9\x06\x6b\x70\x00\x54\x55\x14\x44\x3e\xa6\xf0\x13\x6a\x20\xc0\xa8\xd2\x20\xd6\x16\x7c\x55\x93\x04\xf2\x2d\x19\x63\x8e\x00\x04\x6f\x77\xb0\x26\xd6\x64\xa3\x1a\xd9\x66\x01\x3f\x79\x82\x4a\x22\x49\x81\xba\x86\xb3\xa1\x70\x1b\xc4\x68\x41\x75\x3b\x0a\x40\x79\x0a\xbf\x55\x28\x1f\xbd\xb1\x50\x11\xab\x80\x65\x03\x2d\x40\x62\x86\xf4\x1e\x81\x1a\x8d\x24\xaa\x52\x70\x85\x1e\xaf\xca\xb6\x58\x90\xd4\x1b\x01\xd0\x8f\x25\xa6\x40\xb9\xc6\x4d\xab\xbf\xfb\xad\x85\x2c\x88\xb6\xdf\xce\x5f\x0f\x74\x55\x42\x6a\xca\x37\xf3\xb5\xad\x19\xed\xc4\x07\xe9\xa6\xb4\x0c\x27\x02\x40\x5e\x15\x21\xa9\x51\x4c\x15\x44\xea\xc1\xa8\x24\x3c\x17\x45\x3d\xdc\x80\xe2\x81\xff\xfa\xec\x2c\x9d\xc2\xd7\xd8\x03\x6f\xbc\x94\xf0\x1c\x48\x9e\x53\x43\x42\x18\x98\x20\x60\x80\xa2\x82\x7b\x62\x8c\xfb\x21\xd7\xa1\x92\xa4\x2c\x19\xcd\x2c\xe9\xf2\x57\x25\x78\x7f\x09\x31\x0c\xcc\xef\xcf\x12\xd7\x29\x9c\xfc\x69\x99\x89\xa2\x14\x1c\xb9\x56\x4b\x47\xab\x96\x56\xc5\x93\x96\xe5\x4d\xb8\x9a\x18\x67\x8b\xc1\xf2\x8a\xdf\x13\x46\xf3\x9b\xd6\x24\x9d\x9c\xd2\x78\x57\xdf\x35\x6e\x35\x91\xc6\x39\x38\xee\xac\xdd\xc7\xfc\xe2\x52\x22\xd1\xe8\x11\xf9\xbe\x01\x3b\xaa\xb7\xb0\xa1\xf7\xc8\xa1\x20\xa5\xe7\x08\x16\x51\x6b\xc4\xea\x00\x07\x92\xf8\x5b\x85\x4a\xbf\x13\xf9\x63\x47\x62\x06\xa9\xc4\x3c\x05\x2d\xab\xce\xac\x22\xbb\xe0\xef\xc1\xc3\x62\xb7\xdb\x2d\xcc\xf6\x2d\x2a\xc9\x90\x67\x22\xc7\x3c\x84\x3f\xbe\x25\xce\x30\xc5\xea\x57\xcc\xfa\x06\x57\x4a\x13\x33\x35\xf5\x4d\xac\xf9\xd9\x35\x0e\x87\x7b\x28\xde\x30\xf2\x68\x50\x71\x6e\x6d\x72\x42\x0f\xf3\xa1\x26\x31\xf7\x75\xbf\xb8\x13\x77\xbf\x82\x72\x5a\x54\x45\x0a\xaf\x06\x1f\x77\x34\xd7\xdb\x49\x6d\xaf\x49\xe9\x28\x3f\x87\x72\xe4\xc1\x29\xf7\xfa\xed\xdb\xc1\xe7\x2d\xd2\xcd\x76\x1a\x4d\xa3\x9f\x23\x3d\xb6\x82\xc8\xc9\x8a\xe1\x7f\x77\x84\xb1\x88\x2d\x0c\xea\x02\xaa\x60\x25\x04\x43\xc2\x3b\xd7\x00\xca\x73\x63\xac\xa8\x60\xb7\x45\xbd\x45\x69\xc2\x3c\xc9\x73\xb0\x52\xcd\x3f\x7a\x8b\x9e\xbb\x49\xe0\xc2\xa4\x82\xbd\x6b\xad\xa7\x88\xaa\xb3\x26\x15\xd3\x3d\x0f\x72\xbf\xd6\xbd\x06\x7c\x8b\x41\xd2\x6a\xc6\xe3\x46\xb1\x08\x37\x23\x1a\x8f\x5f\xed\x8d\xc7\x57\x5d\xac\x05\xb2\x12\x95\x86\xcc\x86\x9c\xbc\xef\x1e\x47\x0d\xbf\xcf\x1b\x7d\xcd\xef\xed\x1c\x39\xae\x90\xfc\x9b\x94\x42\xfa\x12\xce\xf7\xa2\x68\x18\x68\x86\x50\x71\x72\x4f\x28\x33\x56\xfa\x3d\x64\x84\x1b\xd3\xc9\xfa\x21\xfc\x25\x40\x6d\xd7\xe2\xea\xb5\xe5\xff\x68\xfe\xff\xf1\xa2\x8d\x0e\x0c\x83\xec\xcd\x52\x63\xf4\xb0\x7a\x04\x9a\x23\xd7\x74\x6d\x16\x25\x9e\x5e\xd1\xc5\xd6\xd7\x51\x5a\xbb\xb9\x7a\x7f\xf2\xb4\xb2\x64\xe8\x06\x26\x0a\xb8\x08\xd0\xcf\x49\x5f\xb8\x27\xbc\x39\x7b\x73\xb8\x1c\xa3\xc2\x3f\x84\xfe\x51\x54\x3c\x7f\x2e\x67\xca\x91\xa1\xc6\x81\xd1\xbd\xb7\xc3\x23\x56\x16\x10\x7c\x19\x66\xf5\xc1\xda\x8e\xab\xd3\x02\x6d\xcd\x61\xc8\x58\x98\xc3\xe2\xe5\x82\xad\xc3\x34\xff\x0a\xad\x0c\x3e\x21\x64\xbb\x5d\xe9\x42\x80\x34\xf9\x15\xb8\xd8\xbd\x6c\xe8\xce\x48\x49\x32\xaa\x1f\xf7\x07\xee\xba\x03\xd2\x10\xee\xf1\x89\x5b\xff\x64\x3d\x08\xe4\x2a\x94\x71\x0a\x97\xf5\x5f\x40\x95\xab\x8d\xaa\x62\x85\xd6\x82\x45\x89\x1c\x73\x03\x05\xc7\xcc\x48\x50\x90\xd3\x7b\x9a\x63\x6e\x8e\x29\xae\xda\xae\x0d\x3d\x38\xcd\xcf\xf4\xa2\x7f\xa2\xae\x24\x6f\x35\x32\x22\x7b\xed\x81\xa3\x6e\x48\x83\x87\xdd\x93\xa6\x61\x15\xdf\x8f\x61\x5a\x99\xe8\x6b\x8c\x6f\x4d\x2c\xc7\x7e\x3a\xb0\x6a\x5a\xee\x51\xf1\x35\xa0\xf5\x4a\x95\xe5\x4a\x0a\x92\x67\xa4\x39\x45\x47\xcf\xd3\xef\x1a\x1a\x20\x50\xa0\x52\x64\x83\x07\x24\x85\x00\x90\x88\x08\x7b\x3c\x60\x0c\xca\xfa\x0c\x69\x3b\x41\x36\x2a\xd8\xa8\x5e\x12\xa5\x30\x8f\xa6\xa2\x67\x49\x37\x5f\xec\xc9\xbc\x86\x6f\xfa\x34\xd9\xc1\xdc\x6e\xb2\x3d\xa2\x7b\x80\x2b\x64\x98\x45\xd2\x64\xa8\x62\xa4\xab\x35\x7e\xce\x0a\x8d\xe4\x69\xa9\xdd\x36\x85\xa9\x89\x82\x9d\xf6\x12\x55\xc5\x34\xac\x19\xd9\xbc\x84\xff\xb4\x46\xfc\x2d\xab\x07\x59\xdd\xdb\xa0\x3f\x46\x3e\xf7\xe2\x9b\x73\xaf\x91\x3e\xfa\xcf\xb6\x63\xea\xa8\x5c\x0f\xb0\x20\xe5\xdc\xf0\xd6\x74\xd9\xf7\xc8\x39\x7e\x7d\x7c\x11\x2a\xd3\xa9\x72\xd4\x1d\x71\xae\xfc\xcc\x2d\x5f\x78\x79\x77\x59\x96\x94\x6f\xf6\x9b\xd4\x0d\xe5\x9b\x45\x29\xf8\xa6\x49\x33\x5d\xf4\x3c\xbc\x2c\x31\x42\x1a\x7e\x13\xc3\xb3\x2d\x66\x1f\xa1\x2a\x3f\xb1\x32\xb9\x71\x6a\x0d\xee\x5b\x8e\x66\x13\x46\x81\x93\xa4\xfb\x90\x26\xc9\xd0\x41\x9c\xed\x37\x82\x29\x4f\xa1\x24\x6d\x87\xce\x5d\xea\xd0\x3c\x89\x2b\x11\x6f\x94\xc6\xda\xa3\xd1\x7c\x3f\xb8\x54\xe9\x95\x20\xc9\x00\xf2\x81\x9d\xa6\x31\x51\x35\x95\xb7\xd4\x64\x0f\xf2\x63\xa8\xc7\x10\x3f\x28\x26\x02\x78\x36\x1c\x55\xf0\x82\x5b\xd0\x24\x27\xac\x39\xaa\xa0\x21\x3e\xb2\x9a\xbe\xb7\x46\xf5\xb4\x7b\x62\xd2\xce\xda\x90\x1c\x51\xbb\xa4\xe1\x74\x36\xeb\x54\x6d\x37\x3b\x52\xcd\x8d\x94\x35\x2a\xbc\xb9\xed\xae\xec\xfa\xa6\xe9\xc5\x0a\xff\x8e\x77\xd8\xcd\x5e\x40\x26\x2a\xde\xfc\x1f\x2b\x20\x37\xbe\xba\x9d\xca\x44\x4a\xe2\xdf\x83\x52\x8d\x85\x3a\x1c\x9c\xb0\x97\x36\xb8\x36\xda\x77\x07\x3c\x50\x63\x78\xb3\x11\xbf\xd1\xb0\xab\xdc\x3b\x43\x73\xad\xef\x50\xb5\xb4\x03\x6c\x0f\x9f\xb3\x76\xef\xe6\x20\x3a\x7f\x93\x33\x51\x14\x82\x47\x8e\x81\x93\x9b\x4d\x2a\xbd\x15\x32\xd8\x6d\xfb\x7a\xc2\x1b\xa9\x1f\x58\x78\x23\xab\x8a\xb2\x7c\xc4\x02\x9c\xd0\xa1\x09\xf4\x0a\xfc\xe0\xa1\xc6\x08\x5d\xf3\xc2\x63\x8a\xce\xaa\xb5\x97\xaa\x75\xa5\xa7\x82\x3c\x44\xd7\x3b\xcd\xc4\xb0\x6d\x53\xc7\x94\x17\x0d\xef\x86\x16\xfd\x0b\xba\x05\x48\xa2\x71\x04\x73\x9a\x8f\xba\x43\xf4\x80\x0b\xb3\xbd\x62\xda\xef\xda\x63\xdf\x31\xdc\xaf\x99\xcb\x39\x20\xe5\xfd\xf3\xe5\xbc\x39\x07\xb7\xbb\x93\xb7\xba\xf3\xe4\x0f\xaf\x67\xa7\xaf\x65\xe7\xcd\x60\x6c\x64\x7c\x77\x3c\x2b\x3a\x5c\xbc\xfd\xf0\x2e\xec\xe0\xcc\xf7\x9f\xb1\xf3\x75\xcc\x7d\x54\x95\x65\xa8\xd4\x88\xcd\xd7\x14\x7b\x57\xfc\x23\x23\x1b\xdb\xf4\x94\x15\x02\x5d\x7b\x1a\x50\xe5\x98\x31\xb7\x2f\x2d\xd6\x35\xe1\x9a\x30\x35\xa4\x5c\x13\xca\x30\x1f\xa0\xd6\xdc\x1b\xdb\x0f\x97\x41\x6b\xf7\x09\x11\xbc\xb6\x68\x15\x6d\x00\xc7\xe0\xe9\x91\xc4\xf0\xc9\x7a\x4a\x0d\xb4\x78\x52\x67\x78\xf5\xd8\xa3\x25\x8c\x89\x5d\x8f\x78\x2d\x64\xb3\x16\xef\xe1\x5a\x08\xa0\x93\x10\xb1\xba\x5c\x54\x2b\x86\x0e\xd8\xa0\x90\x9c\x42\xf5\xb2\x4b\x88\x39\x1a\xd5\x6c\x65\x69\xb7\x58\x6d\x85\xd4\x3e\x35\x68\x7c\xd0\x63\xf8\x8a\xdc\xcf\x82\x1e\x75\x14\x6a\x91\xef\xf7\x3c\xbb\x86\x50\xe0\x5c\xcf\x36\xd3\xef\x6f\x9a\xd8\xb5\xb9\xb5\x7a\x1f\x46\x33\x61\x7d\x71\xf4\x7c\xc9\x30\x72\x13\x36\x9a\x14\x8f\x9f\xc4\xec\x87\x0f\x7e\xa3\x66\xfe\xba\x9b\x37\x8e\xbd\xae\x87\x35\x31\xfb\x84\xab\x5d\xd5\x08\x06\x35\xef\x08\x10\x22\xd4\x72\xa0\xd6\xcf\x75\x55\xbf\x47\x9d\xa7\x14\xdf\x82\xe3\x87\x75\xff\x8c\x1d\xef\x1e\x35\x35\xb9\x7d\xb5\x7b\x32\x8b\xe5\xa2\x2c\xd9\x4c\x96\x4b\x21\x4b\x35\x93\xe7\x5a\x54\x73\x59\xfe\x45\x34\xca\x02\x99\xe0\x73\xf9\x18\xeb\x38\x0a\x52\x4e\xb5\x7b\x5a\x1d\x49\x79\x52\xfb\x22\x95\x2e\x6e\x86\x56\x19\x94\xb7\xe1\xfb\xce\x05\x7c\xc7\x85\xd4\xdb\xef\xfc\x11\x24\x4a\x07\x03\x4a\x54\x3d\x92\x1d\x1a\x12\x37\xa9\xe8\x65\x72\xdf\x46\x7a\xf6\x71\x78\xaf\xc3\x7b\x3e\x77\xe6\x81\x12\x79\x13\xc6\x2b\x66\xdb\xbb\xa9\xcb\xba\x49\xcb\x7d\x65\xe7\x86\x46\x62\x41\x1e\x7a\x23\xf8\x40\x8a\xd2\x30\xfe\xfb\xf5\xf7\x70\xfe\x9f\x76\x39\xea\xe0\xf5\x8c\xde\xa8\x0b\x5d\x6f\x8b\x35\xef\x99\x81\xc2\xf2\x9c\xda\x37\xed\x86\xc3\x24\xd6\x5f\xec\x53\xf5\x5f\x46\xe2\x41\xf0\xee\xb7\x77\x6e\xc8\xc5\x68\xa0\xb0\x6a\x1d\x68\x70\x4e\xc5\xbb\xc7\xd2\xf3\x8c\x30\xe2\x4e\x73\x5f\x79\xad\xcd\x5c\x84\x11\x6a\x02\x55\x55\xc3\x6a\x43\xc0\x4c\x58\x2d\x4f\x0f\x56\x62\xc6\xbe\x4e\x58\x67\xa0\x5a\x83\xea\x82\xe4\x4c\x54\x1d\x53\x0f\xd6\xcc\x0e\x7e\x9d\xb8\x3e\xc5\x5c\x6d\x2a\x99\x09\xac\xe5\xe9\xe1\x5a\x98\xb1\x67\x80\xd5\xfe\xdb\x24\x8c\x3f\x2e\xd4\xb3\x4c\xb8\xe5\xeb\x27\xc2\x49\xee\x86\xa1\xde\xac\x2e\x89\xcf\xdc\xb1\x8e\xb1\xb7\x6d\xbb\xf6\xc3\x37\x97\x50\x2d\xca\x8c\xcd\xc6\x97\xb1\x01\xb2\x8c\x7d\xc3\xb4\xc1\xb4\x11\x14\xe2\x1a\x96\x5c\x5e\xc1\xf5\x97\x37\x31\xb0\x2f\x78\xbd\x13\xed\x49\xa9\xe5\x6d\x8b\xa6\xf3\x57\xfe\x84\x77\x1e\x52\x87\x54\x9d\x36\xe9\x06\x25\xa5\xcb\x17\xc1\x90\x0d\x75\x61\x25\x6a\x4a\xa0\xb0\x12\x25\x8c\xf5\x06\x1a\x47\xab\x0b\xd4\x1b\xd1\x5c\x7e\x4e\x5b\x99\xbd\x6e\x6c\x1e\xfc\xac\xa5\x28\xa6\x3b\xdf\xa5\x68\x57\x19\x33\xa1\xd2\x9b\x7d\xdf\x7e\x40\xfc\x88\x79\xdd\x9d\x01\xa6\xf4\xbe\x3e\xf4\xc8\x38\xda\x1e\x8e\xe9\xff\xb9\x9b\x99\x9e\x45\xbd\x7a\xdd\x95\xfa\x9f\xbf\xc7\xe9\x4d\xfc\xd7\xb7\xc9\xef\x01\x00\x00\xff\xff\x26\x98\xd6\x5b\x80\x3a\x00\x00")

func openapiYamlBytes() ([]byte, error) {
	return bindataRead(
		_openapiYaml,
		"openapi.yaml",
	)
}

func openapiYaml() (*asset, error) {
	bytes, err := openapiYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "openapi.yaml", size: 0, mode: os.FileMode(0), modTime: time.Unix(0, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"openapi.yaml": openapiYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"openapi.yaml": &bintree{openapiYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}


func assetFS() *assetfs.AssetFS {
	assetInfo := func(path string) (os.FileInfo, error) {
		return os.Stat(path)
	}
	for k := range _bintree.Children {
		return &assetfs.AssetFS{Asset: Asset, AssetDir: AssetDir, AssetInfo: assetInfo, Prefix: k}
	}
	panic("unreachable")
}
